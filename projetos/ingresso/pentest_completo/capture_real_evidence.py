#!/usr/bin/env python3
"""
Real Evidence Capture - Ingresso.com Bug Bounty
Captures evidence from actual discovered endpoints
"""

import requests
import json
import time
from datetime import datetime

def capture_real_evidence():
    """Capture evidence from real discovered endpoints"""
    
    # Real endpoints discovered in our previous analysis
    real_endpoints = [
        "https://www.ingresso.com/api/v1/events",
        "https://www.ingresso.com/api/v1/venues", 
        "https://www.ingresso.com/api/v1/categories",
        "https://www.ingresso.com/api/v1/search"
    ]
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
        'Referer': 'https://www.ingresso.com/'
    }
    
    evidence_data = []
    
    print("[*] Capturando evidencias dos endpoints reais descobertos...")
    
    for endpoint in real_endpoints:
        print(f"\n[>] Testando endpoint real: {endpoint}")
        
        try:
            response = requests.get(endpoint, headers=headers, timeout=15)
            
            evidence = {
                'endpoint': endpoint,
                'status_code': response.status_code,
                'response_size': len(response.content),
                'content_type': response.headers.get('content-type', 'unknown'),
                'timestamp': datetime.now().isoformat(),
                'headers': dict(response.headers),
                'vulnerable_indicators': []
            }
            
            if response.status_code == 200:
                content = response.text
                
                # Check for potential vulnerabilities
                vuln_indicators = []
                
                # Check for exposed sensitive data patterns
                if 'email' in content.lower():
                    vuln_indicators.append('email_exposure')
                if 'token' in content.lower():
                    vuln_indicators.append('token_exposure')
                if 'password' in content.lower():
                    vuln_indicators.append('password_reference')
                if 'admin' in content.lower():
                    vuln_indicators.append('admin_reference')
                if 'error' in content.lower() and 'sql' in content.lower():
                    vuln_indicators.append('sql_error')
                
                # Check for information disclosure
                if len(content) > 1000:  # Large response might contain sensitive info
                    vuln_indicators.append('information_disclosure')
                
                evidence['vulnerable_indicators'] = vuln_indicators
                evidence['response_preview'] = content[:1000] + "..." if len(content) > 1000 else content
                
                print(f"[+] Status: {response.status_code} - Size: {len(content)} bytes")
                if vuln_indicators:
                    print(f"[!] Indicadores de vulnerabilidade: {vuln_indicators}")
                else:
                    print("[+] Nenhum indicador de vulnerabilidade obvio")
                    
            else:
                print(f"[i] Status: {response.status_code}")
                evidence['response_preview'] = response.text[:500] if response.text else "No content"
            
            evidence_data.append(evidence)
            
            # Save individual evidence file
            safe_name = endpoint.replace('https://', '').replace('/', '_').replace(':', '_')
            evidence_file = f"evidencias/endpoint_evidence_{safe_name}.json"
            
            with open(evidence_file, 'w', encoding='utf-8') as f:
                json.dump(evidence, f, indent=2, ensure_ascii=False)
            
            print(f"[+] Evidencia salva: {evidence_file}")
            
            time.sleep(3)  # Respectful delay
            
        except Exception as e:
            print(f"[-] Erro ao testar {endpoint}: {str(e)}")
            evidence_data.append({
                'endpoint': endpoint,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    # Save complete evidence report
    complete_evidence = {
        'scan_date': datetime.now().isoformat(),
        'target': 'ingresso.com',
        'total_endpoints_tested': len(real_endpoints),
        'successful_responses': len([e for e in evidence_data if e.get('status_code') == 200]),
        'vulnerability_indicators_found': sum(len(e.get('vulnerable_indicators', [])) for e in evidence_data),
        'evidence_details': evidence_data
    }
    
    with open('relatorios/complete_evidence_report.json', 'w', encoding='utf-8') as f:
        json.dump(complete_evidence, f, indent=2, ensure_ascii=False)
    
    print(f"\n[*] Captura de evidencias concluida!")
    print(f"[*] Relatorio completo: relatorios/complete_evidence_report.json")
    print(f"[*] Endpoints testados: {len(real_endpoints)}")
    print(f"[*] Respostas bem-sucedidas: {complete_evidence['successful_responses']}")
    print(f"[*] Indicadores de vulnerabilidade: {complete_evidence['vulnerability_indicators_found']}")
    
    return complete_evidence

if __name__ == "__main__":
    capture_real_evidence()